package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.81

import (
	"context"
	"go-graphql-poc/db"
	"go-graphql-poc/graph/model"
	"strconv"
)

// CreateCustomer is the resolver for the createCustomer field.
func (r *mutationResolver) CreateCustomer(ctx context.Context, name string, email string) (*model.Customer, error) {
	customer := &db.Customer{Name: name, Email: email}
	var customerModel *model.Customer
	result := db.DB.Create(customer)
	if result.Error == nil {
		customerModel = &model.Customer{Name: name, Email: email, ID: strconv.FormatUint(uint64(customer.ID), 10)}
	}

	return customerModel, result.Error
}

// UpdateCustomer is the resolver for the updateCustomer field.
func (r *mutationResolver) UpdateCustomer(ctx context.Context, id string, name *string, email *string) (*model.Customer, error) {
	cid, _ := strconv.Atoi(id)
	var customer db.Customer
	var customerModel model.Customer
	if err := db.DB.First(&customer, cid).Error; err != nil {
		return nil, err
	}

	customerModel.ID = strconv.FormatUint(uint64(customer.ID), 10)
	customerModel.Name = customer.Name
	customerModel.Email = customer.Email
	if name != nil {
		customer.Name = *name
		customerModel.Name = *name
	}
	if email != nil {
		customer.Email = *email
		customerModel.Email = *email
	}
	db.DB.Save(&customer)
	return &customerModel, nil
}

// DeleteCustomer is the resolver for the deleteCustomer field.
func (r *mutationResolver) DeleteCustomer(ctx context.Context, id string) (bool, error) {
	cid, _ := strconv.Atoi(id)
	if err := db.DB.Delete(&db.Customer{}, cid).Error; err != nil {
		return false, err
	}
	return true, nil
}

// Customers is the resolver for the customers field.
func (r *queryResolver) Customers(ctx context.Context, page *int32, offset *int32) ([]*model.Customer, error) {
	var customers []*db.Customer
	var customersModel []*model.Customer

	result := db.DB.Limit(int(*page)).Offset(int(*offset)).Find(&customers)
	if result.Error != nil {
		return nil, result.Error
	}

	for _, customer := range customers {
		customersModel = append(customersModel, &model.Customer{
			ID:    strconv.Itoa(int(customer.ID)),
			Name:  customer.Name,
			Email: customer.Email,
		})
	}

	return customersModel, result.Error
}

// Customer is the resolver for the customer field.
func (r *queryResolver) Customer(ctx context.Context, id string) (*model.Customer, error) {
	var customer db.Customer
	var customerModel model.Customer
	cid, _ := strconv.Atoi(id)
	result := db.DB.First(&customer, cid)
	if result.Error != nil {
		return nil, result.Error
	}

	customerModel.ID = strconv.FormatUint(uint64(customer.ID), 10)
	customerModel.Name = customer.Name
	customerModel.Email = customer.Email
	return &customerModel, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
